// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (
    id,
    name, 
    url,
    user_id, 
    created_at,
    updated_at
) VALUES ( $1,$2,$3,$4,$5,$6 )
RETURNING id, created_at, updated_at, name, user_id, url, last_fetched_at
`

type AddFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const findFeedByID = `-- name: FindFeedByID :one
SELECT id, created_at, updated_at, name, user_id, url, last_fetched_at FROM feeds WHERE id = $1
`

func (q *Queries) FindFeedByID(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, findFeedByID, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const findFeedByURL = `-- name: FindFeedByURL :one
SELECT id, created_at, updated_at, name, user_id, url, last_fetched_at FROM feeds WHERE url = $1
`

func (q *Queries) FindFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, findFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedsWithUserName = `-- name: GetFeedsWithUserName :many
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.user_id, feeds.url, feeds.last_fetched_at,users.name as user_name FROM feeds
INNER JOIN users 
    ON users.id = feeds.user_id
`

type GetFeedsWithUserNameRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	UserID        uuid.UUID
	Url           string
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeedsWithUserName(ctx context.Context) ([]GetFeedsWithUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUserName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUserNameRow
	for rows.Next() {
		var i GetFeedsWithUserNameRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
			&i.Url,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, created_at, updated_at, name, user_id, url, last_fetched_at FROM feeds 
ORDER BY last_fetched_at ASC
NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.UserID,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds SET 
    last_fetched_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
